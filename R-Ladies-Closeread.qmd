---
title: "Scrollytelling Science with Quarto + Closeread"
format:
  revealjs:
    theme: style.scss
    incremental: true
    transition: fade
    code-line-numbers: true
    self-contained: true
    embed-resources: true
    include-in-header: fontawesome.html
---

## {#TitleSlide .title-slide}

## Agenda

1. What is Scrollytelling?
2. Is it for me?
3. How it works
4. Live Tour of Closeread examples
5. Design and Customization
6. Limitations
7. Resources 
8. Q&A

## About me

```{=html}
<div class="about-me" style="display:flex;align-items:center;">
  <img src="images/BaldoniCecilia.JPG" class="about-me-img">
  <div class="about-me-text">
    <ul>
      <li>Postdoctoral researcher</li>
      <li>Behavioral ecologist / Cognitive scientist</li>
      <li>Love visual storytelling and making research accessible </li>
      <li>Also teach Quarto, PKM, and Open Science</li>
    </ul>
  </div>
</div>

<div class="social-icons">
  <a href="https://github.com/cecibaldoni?tab=repositories" aria-label="GitHub"><i class="fab fa-github"></i></a>
  <a href="https://www.linkedin.com/in/cecilia-baldoni/" aria-label="LinkedIn"><i class="fab fa-linkedin"></i></a>
  <a href="https://bsky.app/profile/cecibaldoni.bsky.social" aria-label="Bluesky"><i class="fa-solid fa-b"></i></a>
  <a href="https://cecibaldoni.github.io/" aria-label="Website"><i class="fas fa-globe"></i></a>
  <a href="https://ko-fi.com/cecibaldoni" aria-label="Ko-fi"><i class="fa-solid fa-mug-hot"></i></a>
</div>

```

## Let's dive in!

### What is Scrollytelling?


::: {.fragment}
> Scrollytelling is an interactive **storytelling** technique that reveals content as the user **scrolls**.

:::

<br>

::: {.fragment}
**It’s engaging, and great for communicating complex ideas**
:::

::: {.fragment}
Examples:
<br>
- [Snowfall](https://www.nytimes.com/projects/2012/snow-fall/index.html#/?part=tunnel-creek) <br>
- [The Millions Who Left](https://www.zeit.de/politik/deutschland/2019-05/east-west-exodus-migration-east-germany-demography)
:::



::: notes
First things first, what is scrollytelling? It's a storytelling format in which
visual and textual elements change as the reader scrolls the page. Scrollytelling has become quite popular in journalism, and in general has been often associated with long-form journalism, because of its ability to communicate complex ideas in an engaging way. 
:::

## Why Scrollytelling?

How is it different from a video, a presentation or a talk? 

::: {.columns}
::: {.column width="50%"}
- **Interactivity**
- **Non-linear experience**: control back to the user
- Focus on the **story** 
:::

::: {.column width="50%"}
![](images/scrollytelling.gif)
:::

:::

::: notes
Scrollytelling is inherently more interactive, text, images, videos, and animations can appear, change, or respond to the scroll, which is inherently a natural behaviour in web sites. Then, it lets the reader control the pacing of the story, especially if you're working with something visual or layered
:::

## Is it for me? 

[...Yes!]{.fragment}
<br><br>

::: {.fragment .fade-in}
*Is your topic well-known, but misunderstood?*
:::

::: {.fragment .fade-in}
*Is your topic obscure but deserves attention?*
:::

::: {.fragment .fade-in}
*Is your topic complex and you want to make it easier?*
:::

::: {.fragment .fade-in}
*Do you want to test your creativity?*
:::

<br>

::: {.fragment .fade-in .centered}
**Scrollytelling is for you!**
:::

## How do you build it? {auto-animate=true #slide-how}

### With Quarto and Closeread!

::: {.fragment}
> [Closeread](https://closeread.dev/) is a Quarto extension that uses a custom JavaScript library built for Quarto to handle scrolling behaviour and triggers.

:::

::: notes
Closeread is primarily a Quarto extension—a plug-in that adds scrollytelling functionality to your Quarto HTML documents.
Under the hood, it uses JavaScript (a JS library written by Quarto devs) to handle scrolling behavior and triggers.
:::

## How do you build it? {auto-animate=true #slide-how2}

::: {.columns}

::: {.column width="50%"}
["Wait... Did you say JavaScript?"]{.miditext}
![](https://media.giphy.com/media/mNqKJi7UyK5CAO1YyM/giphy.gif?cid=ecf05e47zl34j4ja95inqiqadfyumu3dtyrb5ygucsubggv9&ep=v1_gifs_related&rid=giphy.gif&ct=g)
:::

::: {.column width="50%"}
::: {.fragment}
- Quarto Markdown
- YAML Metadata
- R code chunks (optional)
- Closeread triggers
:::

:::
:::

::: notes
Good news: You don’t need to write any JavaScript yourself, it all works with Quarto syntax. The only things you will need to know is Markdown, how to write YAML metadata, r chunks (if you want to add plots or code), and how to write closeread triggers
:::

## How do you build it? {auto-animate=true #slide-how3}

::: {.columns}
::: {.column width="50%"}
["Wait... Did you say JavaScript?"]{.miditext}
![](https://media.giphy.com/media/mNqKJi7UyK5CAO1YyM/giphy.gif?cid=ecf05e47zl34j4ja95inqiqadfyumu3dtyrb5ygucsubggv9&ep=v1_gifs_related&rid=giphy.gif&ct=g)
:::

::: {.column width="50%"}
[**Quarto** for the rescue!]{.miditext}
![](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExOW13dXZranR4YzEzaG1na3k1bmlnYWhoNjRxZGVycTU3ZWFmM2V5NyZlcD12MV9naWZzX3NlYXJjaCZjdD1n/IwAZ6dvvvaTtdI8SD5/giphy.gif)

:::

:::

## How I got started {auto-animate=true}

### My knowledge at the time

::: {.columns}
::: {.column width="50%"}
JavaScript

Closeread syntax

Quarto
:::

::: {.column width="50%"}
::: {.fragment}
No clue ❌  
:::

::: {.fragment}
Never heard of it ❌  
:::

::: {.fragment}
Yes! ✅ 
:::

:::

:::

## How I got started {auto-animate=true}

### My knowledge at the time

::: {.columns}

::: {.column width="50%"}
JavaScript

Closeread syntax

Quarto
:::

::: {.column width="50%"}

::: {.fragment .fade-out}
No clue ❌  
:::

::: {.fragment .fade-out}
Never heard of it ❌  
:::

::: {.fragment .fade-out}
Yes! ✅ 
:::

:::

:::

## How I got started

### What will you need

::: {.columns}

::: {.column width="50%"}
JavaScript

Closeread syntax

Quarto
:::

::: {.column width="50%"}

::: {.fragment}
No need ❌  
:::

::: {.fragment}
Necessary! ✅ 
:::

::: {.fragment}
Also, Necessary! ✅ 
:::

:::

:::

## How I got started


![](images/Posit_logo.png)

- Closeread was first introduced during the Posit Closeread Challenge
- The challenge invited users to try scrollytelling using Quarto and the new `closeread-html` format
- I didn’t enter the contest, but looking at the submissions got me excited to try it myself!


::: notes
Posit, the company behind tools many of us in the R community use every day, like RStudio, Quarto, Shiny, and many others, had launched a Closeread Challenge, inviting people to experiment with scrollytelling using Quarto and this new tool. I didn’t actually participate in the challenge, but I did check the entries.
:::

## Examples 

::: {.columns}
::: {.column width="60%"}
![Let's go on a Tour!](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExOXQ2ZGI0ejQ0bXQ5NzdwZjY4ZnEzOWh5YW11a3Z2b21sYnlqNW0yYyZlcD12MV9naWZzX3NlYXJjaCZjdD1n/18ANhgTABn04M/giphy.gif)
:::

::: {.column width="40%"}

- [Closeread Challenge by Posit](https://posit.co/blog/closeread-prize-winners/)
- [Women are not allowed pockets](https://pudding.cool/2018/08/pockets/)
- [Life after Death on Wikepedia](https://pudding.cool/2018/08/wiki-death/)
- [My own website](https://cecibaldoni.github.io/projects.html)
- [A template for today!](https://github.com/cecibaldoni/scrollytelling-quarto-closeread)
:::
:::

## Closeread Syntax {auto-animate=true #slide-closeread2}

What you will need: 

- Text editor or IDE (e.g. Rstudio, VSCode, Jupyter)
- [Quarto](https://quarto.org/docs/get-started/) installed (minimum version 1.4)
- Quarto document 
- Initialize Closeread

::: {.fragment}
```markdown
quarto add qmd-lab/closeread
```
:::

## Closeread Syntax {auto-animate=true #slide-closeread3}

What you will need: 

::: {.no-fragment}
- Text editor or IDE (Rstudio, VSCode, Jupyter)
- [Quarto](https://quarto.org/docs/get-started/) installed (minimum version 1.4)
- Quarto document 
- Initialize Closeread
:::
- `format: closeread-html` in your document YAML

```markdown
---
title: My First Closeread
format: closeread-html
---
```

## Closeread Elements {auto-animate=true }

### 1. Section

Each `cr-section` creates a scrollytelling "scene" with its own layout.

```markdown
:::{.cr-section layout="overlay-center"}
Your text goes here.
:::
```

::: notes
To start your scrollytelling, you will need a "section" you create in your Quarto document.
You can choose different layouts like overlay-center, sidebar-right, or sidebar-left. These just control where the text and image appear (over the image, next to it, etc.).
:::

## Closeread Elements {auto-animate=true #elements1}

### 2. Sticky

A sticky is the image or visual element that remains *fixed* while the text scrolls
<br><br>
It's defined using an identifier like `#image1` or `#image2`

```markdown
:::{.cr-section layout="overlay-center"}
Your text goes here.
:::

:::{#image1}
![](img/image1.jpg)
:::
```

## Closeread Elements {auto-animate=true #elements2}

### 3. Trigger

Use `@image-id` in the narrative to *trigger* the display of that image.
<br><br>
Example:

```markdown
:::{.cr-section layout="overlay-center"}
Your text goes here. @image1
:::

:::{#image1}
![](img/image1.jpg)
:::
```

::: notes
Any element that is not a sticky element is placed in the narrative part. Tou can trigger the use of a sticky element with the @ handle
:::

## Closeread Elements {auto-animate=true #elements3}

### 4. Features

You can also add optional effects like `scaling`, `zooming`, and `panning`
<br><br>
Example:

```markdown
:::{.cr-section layout="sidebar-right"}
This is some cool content! @cool-content

Let's scale and pan into the cool content! [@cool-content]{pan-to="50%,-20%" scale-by="1.5"}

:::{#cool-content}
![](img/cool-image.jpg)
:::

:::
```

## Closeread Elements {auto-animate=true #elements4}

### Layout Options

Each `.cr-section` block accepts a layout type that controls where the text and image are

|Layout type | What does it do |
|----|----|
| `overlay-center` | Text centered over the image |
| `overlay-left` | Text offset to the left over the image |
| `overlay-right` | Text offset to the right over the image |
| `sidebar-right` | Text on the right, image on the left |
| `sidebar-left` | Text on the left, image on the right |


## Complications: CSS

::: {.columns}
::: {.column width="50%"}
What about **styling**? <br> It's all `CSS`

::: {.fragment}
- CSS stands for Cascading Style Sheets.
- It’s what controls how things look on a web page: fonts, colors, layout, spacing, etc.
:::

:::

::: {.column width="50%"}
![](https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExYjZudnJ0d2p0cXB3ZnlyaHNyNG51bm5paGZlbzV0aDI3ZmhxNGN0ayZlcD12MV9naWZzX3NlYXJjaCZjdD1n/9QvuoiiT6SBtm/giphy.gif)
:::


:::

::: notes
It all seems fine so far, but of course there's a catch. 
While Quarto and Closeread handle the content and the animations, to control how it looks you have to rely on CSS.
Closeread comes 
:::

## About CSS

::: {.columns}
::: {.column width="50%"}
**Bad news**

- If you want to control the layout (colours, font, font size, spacing, text alignment), you need to code in `CSS`
- We don't have time to go over it today (it could be a topic for another talk)
:::

::: {.column width="50%"}
**Good news**

- You don't need to know a lot to get started
- You can copy and adapt `CSS` templates (e.g. from Github)
- You can scale it up gradually
:::

:::

## TL;DR - Thank you!

- A YAML block using `format: closeread-html` to enable Closeread  
- One or more `.cr-section` blocks to define each scrollytelling scene  
- Sticky elements (images, plots, or custom HTML) inside `::{#id}` blocks  
- Triggers (`@id`) in your narrative text to control what’s shown  
- Optional effects: `scale-by`, `pan-to`, `highlight`, etc.

## Resources

[All Submissions for the Closeread Prize - Posit](https://forum.posit.co/tag/closeread-prize-2024?_gl=1*bcqlyj*_ga*MTg3NDUxOTUyMi4xNzMxNDEzODky*_ga_2C0WZ1JHG0*czE3NDc2NjAzMDMkbzQ0JGcwJHQxNzQ3NjYwMzAzJGowJGwwJGgw)<br>
[Closeread Documentation](https://closeread.dev/)<br>
[Cecilia Baldoni - Closeread + Quarto Page](https://cecibaldoni.github.io/projects.html) <br>
[Github file for Closeread of my website](https://github.com/cecibaldoni/cecibaldoni.github.io/blob/main/projects.qmd)<br>
